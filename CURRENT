# Function 1
ratingProbsFit <- function(dataIn,maxRating,predMethod,embedMeans,specialArgs){
  require(lme4)
  require(partykit)
  require(recosystem)
  
  names(dataIn) <- c("userId", "itemId", "rating")
  
  # predMethod & embedMeans:
  if(predMethod == "logit"){
    #loop for maxrating which is 5 in our case?
    for(i in 1: maxRating){
      rating_known <- as.integer(dataIn$rating == i)
      rating_known <- as.factor(rating_known)
      
      glmout <- glm(rating_known ~ userID + itemID, data = trainSet, family = binomial)
      output[[glm_output]] <- glmout #stores into an array
      
    }
    probsFitOut <- list(dataIn = dataIn, predMethod = "logit", maxRating = maxRating,specialArgs = output)
    
    #s3 class
    class(probsFitOut)<-"recProbs"
  }
  
  if (predMethod == 'NMF') {  # check for predMethod
    
  }
  
  # for knn, the specialArgs must contain the value of k, target user, and the target item (all ints)
  if (predMethod == "kNN") {
    probsFitOut <- predict_knn(dataIn, maxRating, specialArgs[1], specialArgs[2], specialArgs[3])
    #s3 class
    class(probsFitOut)<-"recProbs"
    return(probsFitOut)
  }
  
  if (predMethod == 'CART') {  # check for predMethod
    if (embedMeans) {  # check if need to use embedMeans
      probsFitOut <- cartFunc (dataIn, testSet)
      #s3 class
      class(probsFitOut)<-"recProbs"
      return(probsFitOut)
    }
    else {
      tryCatch("CART requires embedMeans")
    }
  }
  
}



predict_knn <- function(dataIn, maxRating, targetUser, targetItem, k){
  names(dataIn) <- c("UserID","ItemID","rating")
  # Only consider relevant users
  new_users <- as.numeric(as.vector(dataIn[dataIn$ItemID == targetItem,1]))
  new_users <- new_users[new_users != targetUser]
  if (k > length(new_users)) {
    tryCatch("k must be <= num of relevant users")
  }
  # Compare dist b/w users
  user_dists <- matrix(0,0,2)
  for (user_itr in new_users) {
    user_dists <- rbind(user_dists, c(user_itr,dist(x=rbind(as.vector(dataIn$ItemID[dataIn$UserID == targetUser]),as.vector(dataIn$ItemID[dataIn$UserID == user_itr])))))
  }
  # Create neighborhood (choose k closest)
  user_dists <- as.data.frame(user_dists)
  user_dists <- user_dists[order(user_dists$V2),]
  user_dists <- user_dists[1:k,]
  # Make list of all ratings from neighbors
  neigh_rats <- matrix(0,0,1)
  for (user_itr in user_dists$V1) {
    neigh_rats <- rbind(neigh_rats, dataIn$rating[dataIn$UserID == user_itr & dataIn$ItemID == targetItem])
  }
  
  return (list("knn", neigh_rats))
}


# Function 2
predict.recProbs <- function(probsFitOut,newXs) {
  if (recProbsFit[1] == "knn") {
    neigh_rats <- recProbsFit[2]
    # Take probab equal to ratio of one rating num to the others
    probs_out <- matrix(0,0,1)
    for (itr in 1:maxRating) {
      probs_out <- rbind(probs_out, (length(neigh_rats[neigh_rats == itr]) / length(neigh_rats)))
    }
    return(probs_out)
  }
  if(probsFitOut/predmethod == "logit"){
    for(i in 1: probsFitOut$maxRating){
      pred_output <- predict.glm(probsFitOut$,newXs,type = "response")
      final_pred <- cbind(final_pred,pred_output)
    }
  }
}


nmfFunc <- function(ratingsIn, testSet, rnk) {
  r <- Reco()
  dataset <- data_memory(ratingsIn[,1],ratingsIn[,2],ratingsIn[,3],index1=TRUE)
  testset <- data_memory(testSet[,1],testSet[,2],testSet[,3],index1=TRUE)
  r$train(dataset, opts=list(dim=rnk, nmf=TRUE))
  result <- r$output(out_memory(),out_memory())
  
  preds <- r$predict(testset, out_memory())
  
}


cartFunc <- function(ratingsIn, testSet) {
  
  #View(ratingsIn)
  ratingsIn$userId <- as.factor(ratingsIn$userId)
  ratingsIn$itemId <- as.factor(ratingsIn$itemId)
  
  userMeans <- tapply(ratingsIn$rating, ratingsIn$userId, mean)
  itemMeans <- tapply(ratingsIn$rating, ratingsIn$itemId, mean)
  ratingsInEmb <- ratingsIn
  
  ratingsInEmb$userId <- userMeans[ratingsIn$userId]
  ratingsInEmb$itemId <- itemMeans[ratingsIn$itemId]
  
  ratingsInEmb$userId <- as.vector(ratingsInEmb$userId)
  ratingsInEmb$itemId <- as.vector(ratingsInEmb$itemId)
  
  ctout <- ctree(rating ~ ., data = ratingsInEmb)
  print(node_party(ctout))
}
